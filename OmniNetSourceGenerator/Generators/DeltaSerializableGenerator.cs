using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using SourceGenerator.Extensions;
using SourceGenerator.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace OmniNetSourceGenerator
{
    [Generator]
    internal class DeltaSerializableGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxReceiver is DeltaSerializableSyntaxReceiver receiver)
            {
                if (receiver.structs.Any())
                {
                    foreach (StructDeclarationSyntax @struct in receiver.structs)
                    {
                        StringBuilder sb = new StringBuilder();
                        sb.AppendLine("#nullable disable");
                        sb.AppendLine("#pragma warning disable");
                        sb.AppendLine();

                        StructDeclarationSyntax parentStruct = @struct.Clear(out var fromStruct);
                        foreach (var usingSyntax in fromStruct.SyntaxTree.GetRoot().GetDescendantsOfType<UsingDirectiveSyntax>())
                            sb.AppendLine(usingSyntax.ToString());

                        if (parentStruct.HasModifier(SyntaxKind.PartialKeyword))
                        {
                            NamespaceDeclarationSyntax currentNamespace = fromStruct.GetNamespace(out bool hasNamespace);
                            if (hasNamespace) currentNamespace = currentNamespace.Clear(out _);

                            var members = fromStruct.Members
                                .Where(m => m is FieldDeclarationSyntax || m is PropertyDeclarationSyntax)
                                .ToList();

                            var writeDeltaMethod = CreateWriteDeltaMethod(members, parentStruct.Identifier.Text);
                            var readDeltaMethod = CreateReadDeltaMethod(members);

                            parentStruct = parentStruct.AddMembers(writeDeltaMethod, readDeltaMethod);

                            if (!hasNamespace)
                            {
                                sb.AppendLine("// Generated by OmniNetSourceGenerator");
                                sb.Append(parentStruct.NormalizeWhitespace().ToString());
                            }
                            else
                            {
                                currentNamespace = currentNamespace.AddMembers(parentStruct);
                                sb.AppendLine("// Generated by OmniNetSourceGenerator");
                                sb.Append(currentNamespace.NormalizeWhitespace().ToString());
                            }

                            context.AddSource($"{parentStruct.Identifier.Text}_delta_serializable_generated_code_.cs", sb.ToString());
                        }
                        else
                        {
                            GenHelper.ReportPartialKeywordRequirement(new Context(context), fromStruct);
                        }
                    }
                }
            }
        }

        private MethodDeclarationSyntax CreateReadDeltaMethod(List<MemberDeclarationSyntax> members)
        {
            var statements = new List<StatementSyntax>();

            // Determinar o tipo do bitmask baseado na quantidade de campos
            string bitmaskType = members.Count <= 8 ? "byte" :
                               members.Count <= 16 ? "ushort" :
                               members.Count <= 32 ? "uint" : "ulong";

            statements.Add(SyntaxFactory.ParseStatement($"{bitmaskType} bytemask = buffer.Read<{bitmaskType}>();"));
            statements.Add(SyntaxFactory.ParseStatement(""));

            int bitIndex = 0;
            foreach (var member in members)
            {
                string memberName = member is FieldDeclarationSyntax field
                    ? field.Declaration.Variables.First().Identifier.Text
                    : ((PropertyDeclarationSyntax)member).Identifier.Text;

                TypeSyntax memberType = member is FieldDeclarationSyntax fieldDecl
                    ? fieldDecl.Declaration.Type
                    : ((PropertyDeclarationSyntax)member).Type;

                statements.Add(SyntaxFactory.ParseStatement(
                    $"if ((bytemask & ({bitmaskType})(1 << {bitIndex})) != 0) {memberName} = buffer.Read<{memberType}>();"
                ));

                bitIndex++;
            }

            return SyntaxFactory.MethodDeclaration(
                SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.VoidKeyword)),
                "ReadDeltaChanges"
            )
            .WithModifiers(
                SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
            )
            .WithParameterList(
                SyntaxFactory.ParameterList(
                    SyntaxFactory.SingletonSeparatedList(
                        SyntaxFactory.Parameter(
                            SyntaxFactory.Identifier("buffer")
                        ).WithType(
                            SyntaxFactory.ParseTypeName("DataBuffer")
                        )
                    )
                )
            )
            .WithBody(SyntaxFactory.Block(statements));
        }

        private MethodDeclarationSyntax CreateWriteDeltaMethod(List<MemberDeclarationSyntax> members, string structName)
        {
            var statements = new List<StatementSyntax>();

            // Determinar o tipo do bitmask baseado na quantidade de campos
            string bitmaskType = members.Count <= 8 ? "byte" :
                               members.Count <= 16 ? "ushort" :
                               members.Count <= 32 ? "uint" : "ulong";

            statements.Add(SyntaxFactory.ParseStatement($"{bitmaskType} bytemask = 0;"));
            statements.Add(SyntaxFactory.ParseStatement(""));

            int bitIndex = 0;
            foreach (var member in members)
            {
                string memberName = member is FieldDeclarationSyntax field
                    ? field.Declaration.Variables.First().Identifier.Text
                    : ((PropertyDeclarationSyntax)member).Identifier.Text;

                statements.Add(SyntaxFactory.ParseStatement(
                    $"if ({memberName} != last.{memberName}) bytemask |= ({bitmaskType})(1 << {bitIndex});\n"
                ));

                bitIndex++;
            }

            statements.Add(SyntaxFactory.ParseStatement(""));
            statements.Add(SyntaxFactory.ParseStatement("DataBuffer buffer = new();"));
            statements.Add(SyntaxFactory.ParseStatement($"buffer.Write(bytemask);"));
            statements.Add(SyntaxFactory.ParseStatement(""));

            bitIndex = 0;
            foreach (var member in members)
            {
                string memberName = member is FieldDeclarationSyntax field
                    ? field.Declaration.Variables.First().Identifier.Text
                    : ((PropertyDeclarationSyntax)member).Identifier.Text;

                statements.Add(SyntaxFactory.ParseStatement(
                    $"if ((bytemask & ({bitmaskType})(1 << {bitIndex})) != 0) buffer.Write({memberName});"
                ));

                bitIndex++;
            }

            statements.Add(SyntaxFactory.ParseStatement(""));
            statements.Add(SyntaxFactory.ParseStatement("last = this;"));
            statements.Add(SyntaxFactory.ParseStatement("return buffer;"));

            return SyntaxFactory.MethodDeclaration(
                SyntaxFactory.ParseTypeName("DataBuffer"),
                "WriteDeltaChanges"
            )
            .WithModifiers(
                SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
            )
            .WithParameterList(
                SyntaxFactory.ParameterList(
                    SyntaxFactory.SingletonSeparatedList(
                        SyntaxFactory.Parameter(
                            SyntaxFactory.Identifier("last")
                        ).WithModifiers(
                            SyntaxFactory.TokenList(
                                SyntaxFactory.Token(SyntaxKind.RefKeyword)
                            )
                        ).WithType(
                            SyntaxFactory.ParseTypeName(structName)
                        )
                    )
                )
            )
            .WithBody(SyntaxFactory.Block(statements));
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new DeltaSerializableSyntaxReceiver());
        }
    }

    public class DeltaSerializableSyntaxReceiver : ISyntaxReceiver
    {
        internal List<StructDeclarationSyntax> structs = new List<StructDeclarationSyntax>();
        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            if (syntaxNode is StructDeclarationSyntax structDeclaration)
            {
                if (structDeclaration.HasAttribute("DeltaSerializable"))
                {
                    structs.Add(structDeclaration);
                }
            }
        }
    }
}
